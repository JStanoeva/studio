import { prioritizeProjects } from "@/ai/flows/prioritize-projects";
import { generateImage } from "@/ai/flows/generate-image-flow";
import { projects as allProjects, Project } from "@/lib/data";
import ProjectCard from "@/components/project-card";

async function getPrioritizedProjects(): Promise<Project[]> {
  const projectEngagementData = allProjects.map(
    ({ projectId, viewCount, interactionCount }) => ({
      projectId,
      viewCount,
      interactionCount,
    })
  );

  try {
    const result = await prioritizeProjects({
      projectEngagementData,
    });
    
    if (result && result.prioritizedProjectIds && result.prioritizedProjectIds.length > 0) {
      const { prioritizedProjectIds } = result;
      const projectMap = new Map(allProjects.map((p) => [p.projectId, p]));
      const prioritized = prioritizedProjectIds
        .map((id) => projectMap.get(id)!)
        .filter(Boolean);
      
      const remaining = allProjects.filter(p => !prioritizedProjectIds.includes(p.projectId));
      
      return [...prioritized, ...remaining];
    }
    throw new Error('AI prioritization returned empty or invalid data.');
  } catch (error) {
    console.error("Failed to prioritize projects with AI, falling back to default sorting:", error);
    // Fallback to a simple sorting mechanism if AI fails
    return [...allProjects].sort(
      (a, b) =>
        (b.viewCount + b.interactionCount * 5) - (a.viewCount + a.interactionCount * 5)
    );
  }
}

async function getProjectsWithGeneratedImages(projects: Project[]): Promise<Project[]> {
    const imagePromises = projects.map(project => 
        generateImage({ prompt: `${project.title}: ${project.description}` })
            .then(output => ({ ...project, imageUrl: output.imageUrl }))
            .catch(err => {
                console.error(`Failed to generate image for project ${project.projectId}:`, err);
                return project; // Return original project on failure
            })
    );
    return Promise.all(imagePromises);
}

export default async function Projects() {
  const sortedProjects = await getPrioritizedProjects();
  const projectsWithImages = await getProjectsWithGeneratedImages(sortedProjects);

  return (
    <section id="projects" className="py-20 sm:py-28 bg-background">
      <div className="container mx-auto px-4">
        <div className="text-center mb-12">
          <h2 className="text-3xl md:text-4xl font-bold text-primary tracking-tight">
            My Work
          </h2>
          <p className="mt-4 text-lg text-muted-foreground max-w-2xl mx-auto">
            Here&apos;s a selection of my recent projects, with images generated by AI. Click to see more.
          </p>
        </div>
        <div className="grid md:grid-cols-2 lg:grid-cols-3 gap-8">
          {projectsWithImages.map((project, index) => (
            <ProjectCard key={project.id} project={project} />
          ))}
        </div>
      </div>
    </section>
  );
}
